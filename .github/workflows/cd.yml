name: Build and Deploy to Docker Hub

on:
  push:
    branches:
      - main

env:
  DOCKER_USERNAME: ${{secrets.DOCKER_USERNAME}}
  DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
  DATABASE_URL: ${{secrets.DATABASE_URL}}
  JWT_SECRET: ${{ secrets.JWT_SECRET }}
  ADMIN_USER: ${{ secrets.ADMIN_USER }}
  ADMIN_SECRET: ${{ secrets.ADMIN_SECRET }}
  REGISTRY: docker.io

jobs:
  build-and-push:
    environment:
      name: Development

    runs-on: ubuntu-latest

    strategy:
      matrix:
        service:
          - name: metaverse-frontend
            context: ./metaverse
            dockerfile: ./metaverse/apps/metaverse-frontend/Dockerfile

          - name: metaverse-http
            context: ./metaverse
            dockerfile: ./metaverse/apps/http/Dockerfile

          - name: metaverse-ws
            context: ./metaverse
            dockerfile: ./metaverse/apps/ws/Dockerfile

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service.context }}
          file: ${{ matrix.service.dockerfile }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.DOCKER_USERNAME }}/${{ matrix.service.name }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.DOCKER_USERNAME }}/${{ matrix.service.name }}:latest
          build-args: |
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            ADMIN_USER=${{ secrets.ADMIN_USER }}
            ADMIN_SECRET=${{ secrets.ADMIN_SECRET }}
            VITE_BACKEND_URL=${{ vars.VITE_BACKEND_URL }}
            VITE_WS_URL=${{ vars.VITE_WS_URL }}
            HTTP_PORT=${{ vars.HTTP_PORT }}
            WS_PORT=${{ vars.WS_PORT }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
